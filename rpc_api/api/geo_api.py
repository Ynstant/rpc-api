# coding: utf-8

"""
    API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: technique@covoiturage.beta.gouv.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rpc_api.api_client import ApiClient


class GeoApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def geo_point_by_address_get(self, literal, country, **kwargs):  # noqa: E501
        """Geocoding à partir d'une adresse litérale  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_point_by_address_get(literal, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str literal: Adresse littérale (required)
        :param str country: Nom complet du pays (required)
        :return: Geopoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geo_point_by_address_get_with_http_info(literal, country, **kwargs)  # noqa: E501
        else:
            (data) = self.geo_point_by_address_get_with_http_info(literal, country, **kwargs)  # noqa: E501
            return data

    def geo_point_by_address_get_with_http_info(self, literal, country, **kwargs):  # noqa: E501
        """Geocoding à partir d'une adresse litérale  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_point_by_address_get_with_http_info(literal, country, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str literal: Adresse littérale (required)
        :param str country: Nom complet du pays (required)
        :return: Geopoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['literal', 'country']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geo_point_by_address_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'literal' is set
        if ('literal' not in params or
                params['literal'] is None):
            raise ValueError("Missing the required parameter `literal` when calling `geo_point_by_address_get`")  # noqa: E501
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `geo_point_by_address_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'literal' in params:
            query_params.append(('literal', params['literal']))  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/geo/point/by_address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Geopoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def geo_point_by_insee_get(self, **kwargs):  # noqa: E501
        """Geocoding à partir d'un code insee  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_point_by_insee_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: Code INSEE commune ou arrondissement de la position Pour le métropoles qui comportent un code INSEE global et des codes par arrondissement, utiliser le code arrondissement. 
        :return: Geopoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geo_point_by_insee_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.geo_point_by_insee_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def geo_point_by_insee_get_with_http_info(self, **kwargs):  # noqa: E501
        """Geocoding à partir d'un code insee  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_point_by_insee_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: Code INSEE commune ou arrondissement de la position Pour le métropoles qui comportent un code INSEE global et des codes par arrondissement, utiliser le code arrondissement. 
        :return: Geopoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geo_point_by_insee_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/geo/point/by_insee', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Geopoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def geo_route_get(self, start, end, **kwargs):  # noqa: E501
        """Calcul théorique de la distance et de la durée  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_route_get(start, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Geopoint start: (required)
        :param Geopoint end: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geo_route_get_with_http_info(start, end, **kwargs)  # noqa: E501
        else:
            (data) = self.geo_route_get_with_http_info(start, end, **kwargs)  # noqa: E501
            return data

    def geo_route_get_with_http_info(self, start, end, **kwargs):  # noqa: E501
        """Calcul théorique de la distance et de la durée  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_route_get_with_http_info(start, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Geopoint start: (required)
        :param Geopoint end: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geo_route_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `geo_route_get`")  # noqa: E501
        # verify the required parameter 'end' is set
        if ('end' not in params or
                params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `geo_route_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/geo/route', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
