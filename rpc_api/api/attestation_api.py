# coding: utf-8

"""
    API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: technique@covoiturage.beta.gouv.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rpc_api.api_client import ApiClient


class AttestationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def certificate_create(self, body, **kwargs):  # noqa: E501
        """Créer un certificat  # noqa: E501

        ## Configuration de la requête  1. La requête est authentifiée avec un [token applicatif](/operateurs/preuves/acces) à ajouter à l'entête de la requête : `Authorization: Bearer <token>` 2. Le fuseau horaire est requis 2. L'identité est requise 3. Le filtrage géographique est optionnel 4. Les dates de début et de fin sont optionnelles 5. La date de fin la plus récente possible est J-6 6. La date de début la plus ancienne est le 1er janvier de l'année précédente  > Voir la [création avancée](#creation-avancee) pour le détail des options  ## Création simple  Les données requises pour la création ne concernent que l'identité de la personne et le fuseau horaire.  Par défaut, l'attestation sera générée pour l'année précédente sans restrictions géographiques.  Chaque appel, même si les paramètres sont les mêmes, entraine la création d'une attestation unique.  Les attestations ne peuvent être supprimées. [Contactez notre équipe](mailto:technique@covoiturage.beta.gouv.fr) au besoin.  ### Astuce Vous pouvez récupérer le fuseau horaire de l'utilisateur en Javascript. ```js const tz = Intl.DateTimeFormat().resolvedOptions().timeZone; ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.certificate_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CertificatesBody body: (required)
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.certificate_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.certificate_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def certificate_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Créer un certificat  # noqa: E501

        ## Configuration de la requête  1. La requête est authentifiée avec un [token applicatif](/operateurs/preuves/acces) à ajouter à l'entête de la requête : `Authorization: Bearer <token>` 2. Le fuseau horaire est requis 2. L'identité est requise 3. Le filtrage géographique est optionnel 4. Les dates de début et de fin sont optionnelles 5. La date de fin la plus récente possible est J-6 6. La date de début la plus ancienne est le 1er janvier de l'année précédente  > Voir la [création avancée](#creation-avancee) pour le détail des options  ## Création simple  Les données requises pour la création ne concernent que l'identité de la personne et le fuseau horaire.  Par défaut, l'attestation sera générée pour l'année précédente sans restrictions géographiques.  Chaque appel, même si les paramètres sont les mêmes, entraine la création d'une attestation unique.  Les attestations ne peuvent être supprimées. [Contactez notre équipe](mailto:technique@covoiturage.beta.gouv.fr) au besoin.  ### Astuce Vous pouvez récupérer le fuseau horaire de l'utilisateur en Javascript. ```js const tz = Intl.DateTimeFormat().resolvedOptions().timeZone; ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.certificate_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CertificatesBody body: (required)
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method certificate_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `certificate_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/certificates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse201',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def certificate_download(self, body, uuid, **kwargs):  # noqa: E501
        """Télécharger une attestation  # noqa: E501

        ## Upload du logo opérateur  Vous pouvez personnaliser le logo opérateur présent sur l'attestation.  Contrairement aux meta-données envoyées lors de la création de l'attestation, le logo est configuré au préalable via le page de profil de votre opérateur.  - [Ajouter mon logo en production](https://app.covoiturage.beta.gouv.fr/admin/operator) - [Ajouter mon logo pour les tests](https://app.demo.covoiturage.beta.gouv.fr/admin/operator)  > _Le poids de l'image est de 2Mo maximum et sa taille de 1024x1024 pixels._  ## Téléchargement  Une fois l’attestation créée en base \\(201 created\\), on peut télécharger un PDF en y ajoutant des données permettant une identification simplifiée de la personne.  Ces meta-données optionnelles ne sont pas stockées sur nos serveurs, elles sont ajoutées au document généré à la volée.  Le PDF généré n'est pas stocké sur nos serveurs. L'appel d'API vous renvoie un fichier binaire que vous sauvegardez de votre côté. Vous pouvez générer le PDF d'une attestation plusieurs fois de suite.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.certificate_download(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UuidAttachmentBody body: (required)
        :param str uuid: Identifiant du certificat précédemment créé. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.certificate_download_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.certificate_download_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def certificate_download_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Télécharger une attestation  # noqa: E501

        ## Upload du logo opérateur  Vous pouvez personnaliser le logo opérateur présent sur l'attestation.  Contrairement aux meta-données envoyées lors de la création de l'attestation, le logo est configuré au préalable via le page de profil de votre opérateur.  - [Ajouter mon logo en production](https://app.covoiturage.beta.gouv.fr/admin/operator) - [Ajouter mon logo pour les tests](https://app.demo.covoiturage.beta.gouv.fr/admin/operator)  > _Le poids de l'image est de 2Mo maximum et sa taille de 1024x1024 pixels._  ## Téléchargement  Une fois l’attestation créée en base \\(201 created\\), on peut télécharger un PDF en y ajoutant des données permettant une identification simplifiée de la personne.  Ces meta-données optionnelles ne sont pas stockées sur nos serveurs, elles sont ajoutées au document généré à la volée.  Le PDF généré n'est pas stocké sur nos serveurs. L'appel d'API vous renvoie un fichier binaire que vous sauvegardez de votre côté. Vous pouvez générer le PDF d'une attestation plusieurs fois de suite.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.certificate_download_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UuidAttachmentBody body: (required)
        :param str uuid: Identifiant du certificat précédemment créé. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method certificate_download" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `certificate_download`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `certificate_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/{uuid}/attachment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def certificate_verify(self, uuid, **kwargs):  # noqa: E501
        """Vérifier un certificat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.certificate_verify(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifiant du certificat précédemment créé. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.certificate_verify_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.certificate_verify_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def certificate_verify_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Vérifier un certificat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.certificate_verify_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifiant du certificat précédemment créé. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method certificate_verify" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `certificate_verify`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
