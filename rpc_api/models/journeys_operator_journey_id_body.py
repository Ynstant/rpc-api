# coding: utf-8

"""
    API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: technique@covoiturage.beta.gouv.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JourneysOperatorJourneyIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operator_trip_id': 'OperatorTripId',
        'operator_class': 'OperatorClass',
        'incentive_counterparts': 'IncentiveCounterparts',
        'incentives': 'Incentives',
        'start': 'TimeGeopoint',
        'end': 'TimeGeopoint',
        'distance': 'Distance'
    }

    attribute_map = {
        'operator_trip_id': 'operator_trip_id',
        'operator_class': 'operator_class',
        'incentive_counterparts': 'incentive_counterparts',
        'incentives': 'incentives',
        'start': 'start',
        'end': 'end',
        'distance': 'distance'
    }

    def __init__(self, operator_trip_id=None, operator_class=None, incentive_counterparts=None, incentives=None, start=None, end=None, distance=None):  # noqa: E501
        """JourneysOperatorJourneyIdBody - a model defined in Swagger"""  # noqa: E501
        self._operator_trip_id = None
        self._operator_class = None
        self._incentive_counterparts = None
        self._incentives = None
        self._start = None
        self._end = None
        self._distance = None
        self.discriminator = None
        if operator_trip_id is not None:
            self.operator_trip_id = operator_trip_id
        self.operator_class = operator_class
        if incentive_counterparts is not None:
            self.incentive_counterparts = incentive_counterparts
        self.incentives = incentives
        self.start = start
        self.end = end
        self.distance = distance

    @property
    def operator_trip_id(self):
        """Gets the operator_trip_id of this JourneysOperatorJourneyIdBody.  # noqa: E501


        :return: The operator_trip_id of this JourneysOperatorJourneyIdBody.  # noqa: E501
        :rtype: OperatorTripId
        """
        return self._operator_trip_id

    @operator_trip_id.setter
    def operator_trip_id(self, operator_trip_id):
        """Sets the operator_trip_id of this JourneysOperatorJourneyIdBody.


        :param operator_trip_id: The operator_trip_id of this JourneysOperatorJourneyIdBody.  # noqa: E501
        :type: OperatorTripId
        """

        self._operator_trip_id = operator_trip_id

    @property
    def operator_class(self):
        """Gets the operator_class of this JourneysOperatorJourneyIdBody.  # noqa: E501


        :return: The operator_class of this JourneysOperatorJourneyIdBody.  # noqa: E501
        :rtype: OperatorClass
        """
        return self._operator_class

    @operator_class.setter
    def operator_class(self, operator_class):
        """Sets the operator_class of this JourneysOperatorJourneyIdBody.


        :param operator_class: The operator_class of this JourneysOperatorJourneyIdBody.  # noqa: E501
        :type: OperatorClass
        """
        if operator_class is None:
            raise ValueError("Invalid value for `operator_class`, must not be `None`")  # noqa: E501

        self._operator_class = operator_class

    @property
    def incentive_counterparts(self):
        """Gets the incentive_counterparts of this JourneysOperatorJourneyIdBody.  # noqa: E501


        :return: The incentive_counterparts of this JourneysOperatorJourneyIdBody.  # noqa: E501
        :rtype: IncentiveCounterparts
        """
        return self._incentive_counterparts

    @incentive_counterparts.setter
    def incentive_counterparts(self, incentive_counterparts):
        """Sets the incentive_counterparts of this JourneysOperatorJourneyIdBody.


        :param incentive_counterparts: The incentive_counterparts of this JourneysOperatorJourneyIdBody.  # noqa: E501
        :type: IncentiveCounterparts
        """

        self._incentive_counterparts = incentive_counterparts

    @property
    def incentives(self):
        """Gets the incentives of this JourneysOperatorJourneyIdBody.  # noqa: E501


        :return: The incentives of this JourneysOperatorJourneyIdBody.  # noqa: E501
        :rtype: Incentives
        """
        return self._incentives

    @incentives.setter
    def incentives(self, incentives):
        """Sets the incentives of this JourneysOperatorJourneyIdBody.


        :param incentives: The incentives of this JourneysOperatorJourneyIdBody.  # noqa: E501
        :type: Incentives
        """
        if incentives is None:
            raise ValueError("Invalid value for `incentives`, must not be `None`")  # noqa: E501

        self._incentives = incentives

    @property
    def start(self):
        """Gets the start of this JourneysOperatorJourneyIdBody.  # noqa: E501


        :return: The start of this JourneysOperatorJourneyIdBody.  # noqa: E501
        :rtype: TimeGeopoint
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this JourneysOperatorJourneyIdBody.


        :param start: The start of this JourneysOperatorJourneyIdBody.  # noqa: E501
        :type: TimeGeopoint
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def end(self):
        """Gets the end of this JourneysOperatorJourneyIdBody.  # noqa: E501


        :return: The end of this JourneysOperatorJourneyIdBody.  # noqa: E501
        :rtype: TimeGeopoint
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this JourneysOperatorJourneyIdBody.


        :param end: The end of this JourneysOperatorJourneyIdBody.  # noqa: E501
        :type: TimeGeopoint
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def distance(self):
        """Gets the distance of this JourneysOperatorJourneyIdBody.  # noqa: E501


        :return: The distance of this JourneysOperatorJourneyIdBody.  # noqa: E501
        :rtype: Distance
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this JourneysOperatorJourneyIdBody.


        :param distance: The distance of this JourneysOperatorJourneyIdBody.  # noqa: E501
        :type: Distance
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")  # noqa: E501

        self._distance = distance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JourneysOperatorJourneyIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneysOperatorJourneyIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
