# coding: utf-8

"""
    API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: technique@covoiturage.beta.gouv.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CertificateDataTotal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trips': 'int',
        'week_trips': 'int',
        'weekend_trips': 'int',
        'distance': 'Distance',
        'amount': 'float'
    }

    attribute_map = {
        'trips': 'trips',
        'week_trips': 'week_trips',
        'weekend_trips': 'weekend_trips',
        'distance': 'distance',
        'amount': 'amount'
    }

    def __init__(self, trips=None, week_trips=None, weekend_trips=None, distance=None, amount=None):  # noqa: E501
        """CertificateDataTotal - a model defined in Swagger"""  # noqa: E501
        self._trips = None
        self._week_trips = None
        self._weekend_trips = None
        self._distance = None
        self._amount = None
        self.discriminator = None
        if trips is not None:
            self.trips = trips
        if week_trips is not None:
            self.week_trips = week_trips
        if weekend_trips is not None:
            self.weekend_trips = weekend_trips
        if distance is not None:
            self.distance = distance
        if amount is not None:
            self.amount = amount

    @property
    def trips(self):
        """Gets the trips of this CertificateDataTotal.  # noqa: E501


        :return: The trips of this CertificateDataTotal.  # noqa: E501
        :rtype: int
        """
        return self._trips

    @trips.setter
    def trips(self, trips):
        """Sets the trips of this CertificateDataTotal.


        :param trips: The trips of this CertificateDataTotal.  # noqa: E501
        :type: int
        """

        self._trips = trips

    @property
    def week_trips(self):
        """Gets the week_trips of this CertificateDataTotal.  # noqa: E501


        :return: The week_trips of this CertificateDataTotal.  # noqa: E501
        :rtype: int
        """
        return self._week_trips

    @week_trips.setter
    def week_trips(self, week_trips):
        """Sets the week_trips of this CertificateDataTotal.


        :param week_trips: The week_trips of this CertificateDataTotal.  # noqa: E501
        :type: int
        """

        self._week_trips = week_trips

    @property
    def weekend_trips(self):
        """Gets the weekend_trips of this CertificateDataTotal.  # noqa: E501


        :return: The weekend_trips of this CertificateDataTotal.  # noqa: E501
        :rtype: int
        """
        return self._weekend_trips

    @weekend_trips.setter
    def weekend_trips(self, weekend_trips):
        """Sets the weekend_trips of this CertificateDataTotal.


        :param weekend_trips: The weekend_trips of this CertificateDataTotal.  # noqa: E501
        :type: int
        """

        self._weekend_trips = weekend_trips

    @property
    def distance(self):
        """Gets the distance of this CertificateDataTotal.  # noqa: E501


        :return: The distance of this CertificateDataTotal.  # noqa: E501
        :rtype: Distance
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this CertificateDataTotal.


        :param distance: The distance of this CertificateDataTotal.  # noqa: E501
        :type: Distance
        """

        self._distance = distance

    @property
    def amount(self):
        """Gets the amount of this CertificateDataTotal.  # noqa: E501

        montant en centimes d'euros  # noqa: E501

        :return: The amount of this CertificateDataTotal.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CertificateDataTotal.

        montant en centimes d'euros  # noqa: E501

        :param amount: The amount of this CertificateDataTotal.  # noqa: E501
        :type: float
        """

        self._amount = amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateDataTotal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateDataTotal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
