# coding: utf-8

"""
    API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: technique@covoiturage.beta.gouv.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeGeopoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_datetime': 'ModelDatetime',
        'lat': 'Lat',
        'lon': 'Lon'
    }

    attribute_map = {
        '_datetime': 'datetime',
        'lat': 'lat',
        'lon': 'lon'
    }

    def __init__(self, _datetime=None, lat=None, lon=None):  # noqa: E501
        """TimeGeopoint - a model defined in Swagger"""  # noqa: E501
        self.__datetime = None
        self._lat = None
        self._lon = None
        self.discriminator = None
        self._datetime = _datetime
        self.lat = lat
        self.lon = lon

    @property
    def _datetime(self):
        """Gets the _datetime of this TimeGeopoint.  # noqa: E501


        :return: The _datetime of this TimeGeopoint.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self.__datetime

    @_datetime.setter
    def _datetime(self, _datetime):
        """Sets the _datetime of this TimeGeopoint.


        :param _datetime: The _datetime of this TimeGeopoint.  # noqa: E501
        :type: ModelDatetime
        """
        if _datetime is None:
            raise ValueError("Invalid value for `_datetime`, must not be `None`")  # noqa: E501

        self.__datetime = _datetime

    @property
    def lat(self):
        """Gets the lat of this TimeGeopoint.  # noqa: E501


        :return: The lat of this TimeGeopoint.  # noqa: E501
        :rtype: Lat
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this TimeGeopoint.


        :param lat: The lat of this TimeGeopoint.  # noqa: E501
        :type: Lat
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this TimeGeopoint.  # noqa: E501


        :return: The lon of this TimeGeopoint.  # noqa: E501
        :rtype: Lon
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this TimeGeopoint.


        :param lon: The lon of this TimeGeopoint.  # noqa: E501
        :type: Lon
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")  # noqa: E501

        self._lon = lon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeGeopoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeGeopoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
