# coding: utf-8

"""
    API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: technique@covoiturage.beta.gouv.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Identitycert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phone': 'str',
        'phone_trunc': 'str',
        'operator_user_id': 'str'
    }

    attribute_map = {
        'phone': 'phone',
        'phone_trunc': 'phone_trunc',
        'operator_user_id': 'operator_user_id'
    }

    def __init__(self, phone=None, phone_trunc=None, operator_user_id=None):  # noqa: E501
        """Identitycert - a model defined in Swagger"""  # noqa: E501
        self._phone = None
        self._phone_trunc = None
        self._operator_user_id = None
        self.discriminator = None
        if phone is not None:
            self.phone = phone
        if phone_trunc is not None:
            self.phone_trunc = phone_trunc
        if operator_user_id is not None:
            self.operator_user_id = operator_user_id

    @property
    def phone(self):
        """Gets the phone of this Identitycert.  # noqa: E501

        Numéro de téléphone à 10 chiffre au format ITU E.164  # noqa: E501

        :return: The phone of this Identitycert.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Identitycert.

        Numéro de téléphone à 10 chiffre au format ITU E.164  # noqa: E501

        :param phone: The phone of this Identitycert.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def phone_trunc(self):
        """Gets the phone_trunc of this Identitycert.  # noqa: E501

        Numéro de téléphone à 8 chiffres. Obligatoire si le numéro de téléphone complet n'est pas fournit.  # noqa: E501

        :return: The phone_trunc of this Identitycert.  # noqa: E501
        :rtype: str
        """
        return self._phone_trunc

    @phone_trunc.setter
    def phone_trunc(self, phone_trunc):
        """Sets the phone_trunc of this Identitycert.

        Numéro de téléphone à 8 chiffres. Obligatoire si le numéro de téléphone complet n'est pas fournit.  # noqa: E501

        :param phone_trunc: The phone_trunc of this Identitycert.  # noqa: E501
        :type: str
        """

        self._phone_trunc = phone_trunc

    @property
    def operator_user_id(self):
        """Gets the operator_user_id of this Identitycert.  # noqa: E501

        Identifiant de l'utilisateur chez l'opérateur. Obligatoire si le numéro de téléphone complet n'est pas fournit.  # noqa: E501

        :return: The operator_user_id of this Identitycert.  # noqa: E501
        :rtype: str
        """
        return self._operator_user_id

    @operator_user_id.setter
    def operator_user_id(self, operator_user_id):
        """Sets the operator_user_id of this Identitycert.

        Identifiant de l'utilisateur chez l'opérateur. Obligatoire si le numéro de téléphone complet n'est pas fournit.  # noqa: E501

        :param operator_user_id: The operator_user_id of this Identitycert.  # noqa: E501
        :type: str
        """

        self._operator_user_id = operator_user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Identitycert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Identitycert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
