# coding: utf-8

"""
    API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: technique@covoiturage.beta.gouv.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Passenger(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identity': 'Identity',
        'payments': 'Payments',
        'contribution': 'float',
        'seats': 'float'
    }

    attribute_map = {
        'identity': 'identity',
        'payments': 'payments',
        'contribution': 'contribution',
        'seats': 'seats'
    }

    def __init__(self, identity=None, payments=None, contribution=None, seats=1):  # noqa: E501
        """Passenger - a model defined in Swagger"""  # noqa: E501
        self._identity = None
        self._payments = None
        self._contribution = None
        self._seats = None
        self.discriminator = None
        self.identity = identity
        if payments is not None:
            self.payments = payments
        self.contribution = contribution
        if seats is not None:
            self.seats = seats

    @property
    def identity(self):
        """Gets the identity of this Passenger.  # noqa: E501


        :return: The identity of this Passenger.  # noqa: E501
        :rtype: Identity
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this Passenger.


        :param identity: The identity of this Passenger.  # noqa: E501
        :type: Identity
        """
        if identity is None:
            raise ValueError("Invalid value for `identity`, must not be `None`")  # noqa: E501

        self._identity = identity

    @property
    def payments(self):
        """Gets the payments of this Passenger.  # noqa: E501


        :return: The payments of this Passenger.  # noqa: E501
        :rtype: Payments
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this Passenger.


        :param payments: The payments of this Passenger.  # noqa: E501
        :type: Payments
        """

        self._payments = payments

    @property
    def contribution(self):
        """Gets the contribution of this Passenger.  # noqa: E501

        Coût réel total du service pour l’occupant passager en fonction du nombre de sièges réservés **APRÈS** que toutes les possibles incitations aient été versées (subventions employeurs, promotions opérateurs, incitations AOM, etc).| Somme exprimée en centimes.   # noqa: E501

        :return: The contribution of this Passenger.  # noqa: E501
        :rtype: float
        """
        return self._contribution

    @contribution.setter
    def contribution(self, contribution):
        """Sets the contribution of this Passenger.

        Coût réel total du service pour l’occupant passager en fonction du nombre de sièges réservés **APRÈS** que toutes les possibles incitations aient été versées (subventions employeurs, promotions opérateurs, incitations AOM, etc).| Somme exprimée en centimes.   # noqa: E501

        :param contribution: The contribution of this Passenger.  # noqa: E501
        :type: float
        """
        if contribution is None:
            raise ValueError("Invalid value for `contribution`, must not be `None`")  # noqa: E501

        self._contribution = contribution

    @property
    def seats(self):
        """Gets the seats of this Passenger.  # noqa: E501

        Nombre de sièges réservés par l'occupant passager.  # noqa: E501

        :return: The seats of this Passenger.  # noqa: E501
        :rtype: float
        """
        return self._seats

    @seats.setter
    def seats(self, seats):
        """Sets the seats of this Passenger.

        Nombre de sièges réservés par l'occupant passager.  # noqa: E501

        :param seats: The seats of this Passenger.  # noqa: E501
        :type: float
        """

        self._seats = seats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Passenger, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Passenger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
