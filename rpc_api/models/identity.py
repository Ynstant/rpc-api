# coding: utf-8

"""
    API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: technique@covoiturage.beta.gouv.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Identity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identity_key': 'str',
        'travel_pass': 'IdentityTravelPass',
        'phone': 'str',
        'phone_trunc': 'str',
        'driving_license': 'OneOfidentityDrivingLicense',
        'operator_user_id': 'str',
        'over_18': 'bool'
    }

    attribute_map = {
        'identity_key': 'identity_key',
        'travel_pass': 'travel_pass',
        'phone': 'phone',
        'phone_trunc': 'phone_trunc',
        'driving_license': 'driving_license',
        'operator_user_id': 'operator_user_id',
        'over_18': 'over_18'
    }

    def __init__(self, identity_key=None, travel_pass=None, phone=None, phone_trunc=None, driving_license=None, operator_user_id=None, over_18=None):  # noqa: E501
        """Identity - a model defined in Swagger"""  # noqa: E501
        self._identity_key = None
        self._travel_pass = None
        self._phone = None
        self._phone_trunc = None
        self._driving_license = None
        self._operator_user_id = None
        self._over_18 = None
        self.discriminator = None
        self.identity_key = identity_key
        if travel_pass is not None:
            self.travel_pass = travel_pass
        if phone is not None:
            self.phone = phone
        if phone_trunc is not None:
            self.phone_trunc = phone_trunc
        if driving_license is not None:
            self.driving_license = driving_license
        self.operator_user_id = operator_user_id
        if over_18 is not None:
            self.over_18 = over_18

    @property
    def identity_key(self):
        """Gets the identity_key of this Identity.  # noqa: E501

        Correspond au sha d'une chaîne concaténée tel que : sha256(*phone_number*-*last_name*) ou - `phone_number` correspond au numéro de téléphone complet au format international sans espace ni tiret. Exemple : +33601020304 - `last_name` correspond au nom de famille complet en majuscule, sans accent ni tiret ni apostrophe (regexp: [A-Z ]*) Par exemple, M. D'Hérûg-de-l'Hérault ayant le numéro 07 01 02 03 04 doit être formatté comme suit \"+33701020304-D HERUG DE L HERAULT\"   # noqa: E501

        :return: The identity_key of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._identity_key

    @identity_key.setter
    def identity_key(self, identity_key):
        """Sets the identity_key of this Identity.

        Correspond au sha d'une chaîne concaténée tel que : sha256(*phone_number*-*last_name*) ou - `phone_number` correspond au numéro de téléphone complet au format international sans espace ni tiret. Exemple : +33601020304 - `last_name` correspond au nom de famille complet en majuscule, sans accent ni tiret ni apostrophe (regexp: [A-Z ]*) Par exemple, M. D'Hérûg-de-l'Hérault ayant le numéro 07 01 02 03 04 doit être formatté comme suit \"+33701020304-D HERUG DE L HERAULT\"   # noqa: E501

        :param identity_key: The identity_key of this Identity.  # noqa: E501
        :type: str
        """
        if identity_key is None:
            raise ValueError("Invalid value for `identity_key`, must not be `None`")  # noqa: E501

        self._identity_key = identity_key

    @property
    def travel_pass(self):
        """Gets the travel_pass of this Identity.  # noqa: E501


        :return: The travel_pass of this Identity.  # noqa: E501
        :rtype: IdentityTravelPass
        """
        return self._travel_pass

    @travel_pass.setter
    def travel_pass(self, travel_pass):
        """Sets the travel_pass of this Identity.


        :param travel_pass: The travel_pass of this Identity.  # noqa: E501
        :type: IdentityTravelPass
        """

        self._travel_pass = travel_pass

    @property
    def phone(self):
        """Gets the phone of this Identity.  # noqa: E501

        Numéro de téléphone à 10 chiffre au format ITU E.164  # noqa: E501

        :return: The phone of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Identity.

        Numéro de téléphone à 10 chiffre au format ITU E.164  # noqa: E501

        :param phone: The phone of this Identity.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def phone_trunc(self):
        """Gets the phone_trunc of this Identity.  # noqa: E501

        Numéro de téléphone à 8 chiffres. Obligatoire si le numéro de téléphone complet n'est pas fournit.  # noqa: E501

        :return: The phone_trunc of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._phone_trunc

    @phone_trunc.setter
    def phone_trunc(self, phone_trunc):
        """Sets the phone_trunc of this Identity.

        Numéro de téléphone à 8 chiffres. Obligatoire si le numéro de téléphone complet n'est pas fournit.  # noqa: E501

        :param phone_trunc: The phone_trunc of this Identity.  # noqa: E501
        :type: str
        """

        self._phone_trunc = phone_trunc

    @property
    def driving_license(self):
        """Gets the driving_license of this Identity.  # noqa: E501

        Numéro de permis de conduire (également appelé code driving_license) cf https://permisdeconduire.ants.gouv.fr/tout-savoir-sur-le-permis/le-numero-de-dossier-sur-un-permis-au-format-carte-bancaire    # noqa: E501

        :return: The driving_license of this Identity.  # noqa: E501
        :rtype: OneOfidentityDrivingLicense
        """
        return self._driving_license

    @driving_license.setter
    def driving_license(self, driving_license):
        """Sets the driving_license of this Identity.

        Numéro de permis de conduire (également appelé code driving_license) cf https://permisdeconduire.ants.gouv.fr/tout-savoir-sur-le-permis/le-numero-de-dossier-sur-un-permis-au-format-carte-bancaire    # noqa: E501

        :param driving_license: The driving_license of this Identity.  # noqa: E501
        :type: OneOfidentityDrivingLicense
        """

        self._driving_license = driving_license

    @property
    def operator_user_id(self):
        """Gets the operator_user_id of this Identity.  # noqa: E501

        Identifiant de l'utilisateur chez l'opérateur. Obligatoire si le numéro de téléphone complet n'est pas fournit.  # noqa: E501

        :return: The operator_user_id of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._operator_user_id

    @operator_user_id.setter
    def operator_user_id(self, operator_user_id):
        """Sets the operator_user_id of this Identity.

        Identifiant de l'utilisateur chez l'opérateur. Obligatoire si le numéro de téléphone complet n'est pas fournit.  # noqa: E501

        :param operator_user_id: The operator_user_id of this Identity.  # noqa: E501
        :type: str
        """
        if operator_user_id is None:
            raise ValueError("Invalid value for `operator_user_id`, must not be `None`")  # noqa: E501

        self._operator_user_id = operator_user_id

    @property
    def over_18(self):
        """Gets the over_18 of this Identity.  # noqa: E501

        Applicable seulement au passager.   - true si majeur   - false si mineur   - null si non fournit  > De nombreuses campagnes utilisent cette information pour s'assurer que les bénéficiaires d'incitations sont majeures. La valeur `NULL` les exclues.   # noqa: E501

        :return: The over_18 of this Identity.  # noqa: E501
        :rtype: bool
        """
        return self._over_18

    @over_18.setter
    def over_18(self, over_18):
        """Sets the over_18 of this Identity.

        Applicable seulement au passager.   - true si majeur   - false si mineur   - null si non fournit  > De nombreuses campagnes utilisent cette information pour s'assurer que les bénéficiaires d'incitations sont majeures. La valeur `NULL` les exclues.   # noqa: E501

        :param over_18: The over_18 of this Identity.  # noqa: E501
        :type: bool
        """

        self._over_18 = over_18

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Identity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Identity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
