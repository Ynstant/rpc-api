# coding: utf-8

"""
    API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: technique@covoiturage.beta.gouv.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CertificatesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identity': 'Identitycert',
        'tz': 'str',
        'start_at': 'datetime',
        'end_at': 'datetime',
        'positions': 'list[Geopoint]'
    }

    attribute_map = {
        'identity': 'identity',
        'tz': 'tz',
        'start_at': 'start_at',
        'end_at': 'end_at',
        'positions': 'positions'
    }

    def __init__(self, identity=None, tz=None, start_at=None, end_at=None, positions=None):  # noqa: E501
        """CertificatesBody - a model defined in Swagger"""  # noqa: E501
        self._identity = None
        self._tz = None
        self._start_at = None
        self._end_at = None
        self._positions = None
        self.discriminator = None
        self.identity = identity
        self.tz = tz
        if start_at is not None:
            self.start_at = start_at
        if end_at is not None:
            self.end_at = end_at
        if positions is not None:
            self.positions = positions

    @property
    def identity(self):
        """Gets the identity of this CertificatesBody.  # noqa: E501


        :return: The identity of this CertificatesBody.  # noqa: E501
        :rtype: Identitycert
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this CertificatesBody.


        :param identity: The identity of this CertificatesBody.  # noqa: E501
        :type: Identitycert
        """
        if identity is None:
            raise ValueError("Invalid value for `identity`, must not be `None`")  # noqa: E501

        self._identity = identity

    @property
    def tz(self):
        """Gets the tz of this CertificatesBody.  # noqa: E501

        fuseau horaire  # noqa: E501

        :return: The tz of this CertificatesBody.  # noqa: E501
        :rtype: str
        """
        return self._tz

    @tz.setter
    def tz(self, tz):
        """Sets the tz of this CertificatesBody.

        fuseau horaire  # noqa: E501

        :param tz: The tz of this CertificatesBody.  # noqa: E501
        :type: str
        """
        if tz is None:
            raise ValueError("Invalid value for `tz`, must not be `None`")  # noqa: E501

        self._tz = tz

    @property
    def start_at(self):
        """Gets the start_at of this CertificatesBody.  # noqa: E501

        Date de début au format ISO. Sélectionne les trajet >= date  # noqa: E501

        :return: The start_at of this CertificatesBody.  # noqa: E501
        :rtype: datetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this CertificatesBody.

        Date de début au format ISO. Sélectionne les trajet >= date  # noqa: E501

        :param start_at: The start_at of this CertificatesBody.  # noqa: E501
        :type: datetime
        """

        self._start_at = start_at

    @property
    def end_at(self):
        """Gets the end_at of this CertificatesBody.  # noqa: E501

        Date de fin au format ISO nécessairement supérieur à start_at. Sélectionne les trajets < date  # noqa: E501

        :return: The end_at of this CertificatesBody.  # noqa: E501
        :rtype: datetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this CertificatesBody.

        Date de fin au format ISO nécessairement supérieur à start_at. Sélectionne les trajets < date  # noqa: E501

        :param end_at: The end_at of this CertificatesBody.  # noqa: E501
        :type: datetime
        """

        self._end_at = end_at

    @property
    def positions(self):
        """Gets the positions of this CertificatesBody.  # noqa: E501

        Pour sélectionner des trajets en fonction de leur point de départ et d'arrivée, il est possible de les préciser avec la clé `positions`. Tous les trajets ayant un départ **et** une arrivée dans un rayon de `1km` autour des points donnés seront inclus à l'attestation.   # noqa: E501

        :return: The positions of this CertificatesBody.  # noqa: E501
        :rtype: list[Geopoint]
        """
        return self._positions

    @positions.setter
    def positions(self, positions):
        """Sets the positions of this CertificatesBody.

        Pour sélectionner des trajets en fonction de leur point de départ et d'arrivée, il est possible de les préciser avec la clé `positions`. Tous les trajets ayant un départ **et** une arrivée dans un rayon de `1km` autour des points donnés seront inclus à l'attestation.   # noqa: E501

        :param positions: The positions of this CertificatesBody.  # noqa: E501
        :type: list[Geopoint]
        """

        self._positions = positions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificatesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificatesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
